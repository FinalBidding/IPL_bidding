{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation sample template that contains a single Lambda function behind an API Gateway",

  "Resources": {

    "UserRegistration": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": { "Fn::Join": ["\n", [
            "import boto3",
            "def lambda_handler(event, context):",
            "    name = event['query']['un']",
            "    password = event['query']['ps']",
            "    dynamodb = boto3.resource('dynamodb')",
            "    table = dynamodb.Table('Form')",
            "    table.put_item(Item={'UserName': name,'Password': password})",
            "    return 'Successful'"
          ]]}
        },
        "Description": "A User Registration function",
        "FunctionName": "UserRegistration",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Runtime": "python3.6"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
		"Policies": [{
          "PolicyName": "DDBwriteAccessPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:UpdateTimeToLive",
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:RestoreTableToPointInTime",
                "dynamodb:UpdateItem",
                "dynamodb:CreateBackup",
				"dynamodb:DeleteTable",
				"dynamodb:UpdateContinuousBackups",
				"dynamodb:CreateTable",
				"dynamodb:RestoreTableFromBackup",
				"dynamodb:DeleteBackup",
				"dynamodb:UpdateTable"
              ],
              "Resource": ["arn:aws:dynamodb:us-east-1:488599217855:table/Form", 
							"arn:aws:dynamodb:*:*:table/*/backup/*"]
            },{
			"Effect": "Allow",
            "Action": ["dynamodb:TagResource","dynamodb:UntagResource",
			  "dynamodb:PurchaseReservedCapacityOfferings"],
			"Resource": "*"  
			}
			]
          }
        }],
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },

    "UserRegApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "User Registration API",
        "Description": "API used for User Registration requests",
        "FailOnWarnings": true
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["UserRegistration", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "UserRegApi"}, "/*"]]}
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "UserRegApiStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "UserRegApi"},
        "StageName": "LATEST",
        "Variables": {
          "Tom": "Maslen-v4"
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["UserRegRequestGET", "UserRegRequestPOST"],
      "Properties": {
        "RestApiId": {"Ref": "UserRegApi"},
        "StageName": "DummyStage"
      }
    },

    "UserRegResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "UserRegApi"},
        "ParentId": {"Fn::GetAtt": ["UserRegApi", "RootResourceId"]},
        "PathPart": "UserReg"
      }
    },

    "UserRegRequestGET": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["UserRegistration", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200,
            "ResponseTemplates": {
              "application/json": "$input.json('$.body')"
            }
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join": ["", [
			  "{\n",
              "  \"body\" : $input.json('$'),\n",
              "  \"headers\": {\n",
              "    #foreach($header in $input.params().header.keySet())\n",
              "    \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n",
              "\n",
              "    #end\n",
              "  },\n",
              "  \"method\": \"$context.httpMethod\",\n",
              "  \"params\": {\n",
              "    #foreach($param in $input.params().path.keySet())\n",
              "    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n",
			  "\n",
              "    #end\n",
              "  },\n",
              "  \"query\": {\n",
              "    #foreach($queryParam in $input.params().querystring.keySet())\n",
              "    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n",
              "\n",
              "    #end\n",
              "  }\n",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "UserRegResource"},
        "RestApiId": {"Ref": "UserRegApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    },

    "UserRegRequestPOST": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["UserRegistration", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200,
            "ResponseTemplates": {
              "application/json": "$input.json('$.body')"
            }
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join": ["", [
               "{\n",
              "  \"body\" : $input.json('$'),\n",
              "  \"headers\": {\n",
              "    #foreach($header in $input.params().header.keySet())\n",
              "    \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n",
              "\n",
              "    #end\n",
              "  },\n",
              "  \"method\": \"$context.httpMethod\",\n",
              "  \"params\": {\n",
              "    #foreach($param in $input.params().path.keySet())\n",
              "    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n",
			  "\n",
              "    #end\n",
              "  },\n",
              "  \"query\": {\n",
              "    #foreach($queryParam in $input.params().querystring.keySet())\n",
              "    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n",
              "\n",
              "    #end\n",
              "  }\n",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "UserRegResource"},
        "RestApiId": {"Ref": "UserRegApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }

  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "UserRegApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]}
    }
  }
}
